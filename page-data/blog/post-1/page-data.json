{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/post-1","result":{"data":{"markdownRemark":{"html":"<!-- # H1\n\n## H2\n\n### H3\n\n#### H4\n\n##### H5\n\n###### H6\n\nParagraph\n\n---\n\n> This is a quote\n\n---\n\n[Example.com](example.com)\n\n---\n\n`const foo = bar`\n\n```javascript\nconst foo = bar\nconsole.log(foo);\n```\n\n---\n\n| Hello | World |\n|-------|------ |\n| Foo   | Bar   | -->\n<p>이 시리즈는 츠토무 토네가 쓴 성공과 실패를 결정하는 1%의 네트워크 원리를 읽고 정리한 내용으로,\n유저가 브라우저에 URL을 입력한 후에 원했던 화면이 보이기까지 다음과 같은 순서를 거치게 되는데\n각각의 단계에서 어떤 일이 일어나는지 어떻게 연결되는지를 공부하려고 한다.</p>\n<p>사용자 -> 웹브라우저-> TCP/IP -> LAN드라이버 -> 허브 -> 라우터 -> 엑세스회선 -> 전화국 -> 통신사\n-> 통신사 -> 전화국 -> 엑세스회선 -> 방화벽 -> 캐시서버 -> LAN드라이버 -> TCP/IP -> 웹서버</p>\n<p>제 1편인 이번 포스트에서는 URL의 구성과 웹브라우저에서 IP를 알아내기 위해 하는 일들을 살펴본다.</p>\n<p>XX 틀린 내용이 있을 수 있음 주의XX</p>\n<h3>URL이란</h3>\n<p>Uniform Resource Locator(URL)은 인터넷 자원의 위치를 나타내는 것으로, 웹에 게시된 어떤 자원을 찾기위해\n브라우저에 의해 사용되는 메카니즘이다.<br>\nURL은 protocol + domain + port + path + parameter + fragment 로 구성된다.  </p>\n<p>protocol은 사용자가 입력한 자원 위치에서 자원을 가져오기 위해 브라우저가 어떤 프로토콜을 사용해야하는지 명시하는 것이다.\n흔히 보는 URL 주소에서 http:// 부분을 말한다. 대부분 http프로토콜을 사용해 웹 페이지를 가져오는 용도로 브라우저를 사용하기 때문에\n이외에 다른 것이 있다는 게 낯설지만, 브라우저에 ftp:// mailto://등의 프로토콜을 입력하여 파일업로드나 메일 송신등을 지시할 수도 있다.</p>\n<p>domain은 웹서버이름이고 DNS서버에 이 이름을 조회하여 웹서버의 실질적인 위치인 IP주소를 알아낼 수 있다.\nTCP/IP 네트워크는 서브넷이라는 작은단위의 네트워크를 라우터로 연결하여 전체 네트워크를 완성하는데 네트워크의 번호와\n호스트 번호를 합쳐서 IP주소라고 한다.<br>\nIPv4체계에서 IP 주소는 32비트의 디지털 데이터로, 8비트씩 점으로 구분하여 10진수로 표기한다.<br>\n네트워크 주소 영역이 어디까지인지에 따라 IP주소를 클래스로 구분할 수 있고, 해당 클래스에 따라 기본 서브넷 마스크가 주어진다.<br>\n기본 서브넷 마스크는 네트워크 주소부분의 비트를 1로, 호스트부분의 비트를 0으로 표시하며, IP 주소와 서브넷 마스크를 AND 연산 하면 네트워크 주소를 구할 수 있다.\n보안과 효율을 위해 호스트 번호 구간을 분할하여 서브네트워크를 만들어서 사용할 수도 있다.</p>\n<p>아무튼 이러한 IP주소를 알아내기 위해 컴퓨터에서 일어나는 일련의 동작들을 좀 더 자세히 살펴보자.</p>\n<h3>DNS서버를 조회하여 IP 주소 알아내기</h3>\n<p>DNS서버에 도메인이름을 조회하기 위해서 브라우저는 소켓 라이브러리에 들어있는 DNS리졸버 모듈을 호출하여 메세지를 작성한다.<br>\n리졸버에서 메세지 작성이 완료되면, OS의 내장 프로토콜 스택을 호출한다. 프로토콜 스택은 운영체제에 내장된 네트워크 제어용 소프트웨어를 뜻한다.\n프로토콜 스택은 데이터를 송수신하기 위한 소켓의 접속 연결, 연결종료 등을 실행하며, 각 단계에서 소켓라이브러리의 모듈을 사용한다.<br>\n먼저 socket 모듈을 사용해 클라이언트의 소켓을 생성하는데, 이 때 디스크럽터라는 것이 리턴이된다. 디스크럽터는 컴퓨터에 존재하는 다수의 소켓들과 구분하기 위한 식별자역할이다.\n디스크럽터가 리턴이 되면 프로토콜 스택은 connect모듈을 사용하여 미리 만들어져 있는 서버의 소켓에 접속을 하고, 이때 디스크럽터와, 서버의 IP, 포트번호를 함께 넘긴다.\n포트번호는 서버 역시 다수의 소켓이 존재할 것이므로 그 중 명확한 소켓을 지정하기 위해 사용한다. 디스크럽터는 컴퓨터 내부에서 사용되는 것으로 서버측 디스크럽터는 클라이언트에서 알 수 없기 때문이다.\n(보통 웹은 80으로 포트번호가 정해져있다.)\n그렇게 소켓이 접속 되면 write모듈을 사용하여 데이터를 보내고, read모듈을 사용하여 수신 버퍼에 저장하며, close 모듈을 사용하여 연결을 끊게 된다.</p>\n<h2>소켓</h2>\n<p>소켓은 OS에서 기본적으로 제공하는 네트워크 API이다. 네트워크 처리에 대해 일일이 프로그래밍 할 필요 없이 함수 및 라이브러리 형태로 사용할 수 있도록 제공하고 있다.</p>","excerpt":"이 시리즈는 츠토무 토네가 쓴 성공과 실패를 결정하는 1%의 네트워크 원리를 읽고 정리한 내용으로,\n유저가 브라우저에 URL…","frontmatter":{"date":"06 September, 2021","path":"/blog/post-1","title":"유저가 브라우저에 URL을 입력한 후 벌어지는 일들 -1"},"fields":{"readingTime":{"text":"3 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}